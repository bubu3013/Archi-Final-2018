#include<iostream>
#include <string>
#include<math.h>
#include <sstream>
#include <fstream>

using namespace std;

int address_bits,number_of_sets,associativity,block_size;
int indexing_bit_count,indexing_bits,offset_bit_count,tag_bit_count;

int i,hit,miss=0;
int valid[1000000]={0};
int lru[100]={0};
int idx;

char temp;

fstream fin1,fin2;
fstream file;

string input[1000];
string line="";
string memory[1000][1000];
string refer="";
string index="";
string tag="";

stringstream ss;

int main(int argc, char *argv[])
{
    /*open the file cache.org*/
    fin1.open(argv[1],ios::in);
    if (fin1.good())
        cout<<"open sucessfully\n";
    else
         cout<<"open fail\n";
    /*to store 4 value*/
    i=0;
    while (getline(fin1,line))
    {
        if (i==0)
            address_bits=line[line.length()-1]-'0';
        else if (i==1)
            number_of_sets=line[line.length()-1]-'0';
        else if (i==2)
            associativity=line[line.length()-1]-'0';
        else if (i==3)
        {
            block_size=line[line.length()-1]-'0';
            break;
        }
        i++;
    }
    fin1.close();
    /*read file reference*/
    i=0;
    fin2.open(argv[2],ios::in);
    if (fin2.good())
        cout<<"open sucessfully\n";
    else
         cout<<"open fail\n";
    while (getline(fin2,line))
    {
        input[i++]=line;
        //cout<<input[i++]<<endl;
    }
    fin2.close();
    /*write data*/
    file.open(argv[3],ios::out);
    if (file.good())
        cout<<"open sucessfully\n";
    else
         cout<<"open fail\n";
    
    indexing_bit_count=log(number_of_sets)/log(2);
    offset_bit_count=(log(block_size)/log(2));
    tag_bit_count=address_bits-offset_bit_count-indexing_bit_count;

    file<<"Address bits: "<<address_bits<<endl;
    file<<"Number of sets: "<<number_of_sets<<endl;
    file<<"Associativity: "<<associativity<<endl;
    file<<"Block size: "<<block_size<<endl;

    file<<"Indexing bit count: "<<indexing_bit_count<<endl;
    file<<"Indexing bits: ";
    for (int i=address_bits-tag_bit_count-1;i>=offset_bit_count;i--)
        file<<i <<" ";
    file<<"\nOffset bit count: "<<offset_bit_count<<endl<<endl;

    file<<input[0]<<endl;

    for (int k=1;;k++)
    {
        refer=input[k];
        /*to end the program*/
        if (refer==".end")
            break;
        /*get index and tag*/
        index=refer.substr(address_bits-offset_bit_count-indexing_bit_count,indexing_bit_count);
        tag=refer.substr(0,address_bits-offset_bit_count-indexing_bit_count);

        ss<<index;
        ss>>idx;
        ss.clear();

        hit=0;
        /*whether it is invalid*/
        if(valid[idx]==0)
        {
            /*store it it mem*/
            file<<refer<<" miss"<<endl;
            valid[idx]=1;
            memory[idx][0]=tag;
            miss++;
            /*to deal with lru*/
            lru[idx]=(lru[idx]+1)%associativity;
        }
        /*whether it is valid*/
        else if (valid[idx]==1)
        {
            /*to find a hit*/
            for (int i=0;i<associativity;i++)
            {
                if (memory[idx][i]==tag)
                {
                    file<<refer<<" hit"<<endl;
                    /*if the hit is lru*/
                    if (lru[idx]==i)
                    {
                        lru[idx]=(lru[idx]+1)%associativity;
                    }
                    hit=1;
                }
            }
            /*cannot find a hit*/
            if (!hit)
            {
                file<<refer<<" miss"<<endl;
                memory[idx][lru[idx]]=tag;
                miss++;
                /*to deal with lru*/
                lru[idx]=(lru[idx]+1)%associativity;
            }
        }
    }
    file<<".end\n";
    file<<"Total cache miss count: "<<miss<<endl;



    file.close();

}
